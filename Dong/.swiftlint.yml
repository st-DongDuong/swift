# Rules Directory https://realm.github.io/SwiftLint/rule-directory.html

disabled_rules:  # rule identifiers to exclude from running
  - colon
  - comma
  - control_statement

opt_in_rules: # some rules are only opt-in
  # Find all the available rules by running:
  # swiftlint rules
  # - anyobject_protocol
  - array_init
  - attributes
  - closure_body_length
  - closure_end_indentation
  - closure_spacing
  - collection_alignment
  # - conditional_returns_on_newline
  - contains_over_filter_count
  - contains_over_filter_is_empty
  - contains_over_first_not_nil
  - contains_over_range_nil_comparison
  # - convenience_type
  # - discouraged_object_literal
  # - discouraged_optional_boolean
  # - discouraged_optional_collection
  - empty_collection_literal
  - empty_count
  - empty_string
  # - empty_xctest_method
  - enum_case_associated_values_count
  - expiring_todo
  # - explicit_acl
  # - explicit_enum_raw_value
  - explicit_init
  # - explicit_self
  # - explicit_top_level_acl
  # - explicit_type_interface
  # - extension_access_modifier
  - fallthrough
  # - fatal_error_message
  # - file_header
  # - file_name
  # - type_contents_order
  # - file_types_order # Leave it off
  - first_where
  - flatmap_over_map_reduce
  # - force_unwrapping
  # - function_default_parameter_at_end  # Leave it off purposely
  # - identical_operands
  - implicit_return
  - implicitly_unwrapped_optional
  # - joined_default_parameter
  - last_where
  - legacy_hashing
  - legacy_multiple
  - legacy_random
  # - let_var_whitespace
  # - literal_expression_end_indentation
  # - lower_acl_than_parent
  # - missing_docs
  - modifier_order
  - multiline_arguments
  # - multiline_arguments_brackets # Leave it off purposely
  - multiline_function_chains
  - multiline_literal_brackets
  - multiline_parameters
  - multiline_parameters_brackets
  # - nimble_operator
  # - no_extension_access_modifier
  # - no_grouping_extension
  # - nslocalizedstring_key
  - number_separator
  # - object_literal # Leave it off purposely
  - operator_usage_whitespace
  - optional_enum_case_matching
  - overridden_super_call
  # - override_in_extension
  - pattern_matching_keywords
  - prefer_self_type_over_type_of_self
  # - prefixed_toplevel_constant
  - private_action
  - private_outlet
  # prohibited_interface_builder
  # - prohibited_nan_comparison # enable this after swiftlint 0.39 issue is fixed
  - prohibited_super_call
  # - quick_discouraged_call
  # - quick_discouraged_focused_test
  # - quick_discouraged_pending_test
  - raw_value_for_camel_cased_codable_enum
  - reduce_into
  # - redundant_nil_coalescing
  - redundant_type_annotation
  # - required_deinit
  - required_enum_case
  # - return_value_from_void_function # enable this after swiftlint 0.39 issue is fixed
  - single_test_class
  - sorted_first_last
  # sorted_imports
  # - static_operator
  # - strict_fileprivate
  # - switch_case_on_newline
  # - toggle_bool
  # - trailing_closure
  # - tuple_pattern # enable this after swiftlint 0.39 issue is fixed
  # - unavailable_function
  # unneeded_parentheses_in_closure_argument
  - unowned_variable_capture
  # - untyped_error_in_catch
  - unused_import
  - unused_declaration
  - vertical_parameter_alignment_on_call
  # - vertical_whitespace_between_cases
  # - vertical_whitespace_opening_braces
  - vertical_whitespace_closing_braces
  # - void_function_in_ternary # enable this after swiftlint 0.39 issue is fixed
  - xct_specific_matcher
  - yoda_condition

excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods

analyzer_rules: # Rules run by `swiftlint analyze` (experimental)
  - explicit_self

custom_rules:
  strong_self:
    name: "strong_self"
    regex: "let strongSelf = self"
    message: "Prefer `let self = self` over `let strongSelf = self` Check https://github.com/apple/swift-evolution/blob/master/proposals/0079-upgrade-self-from-weak-to-strong.md for more details"
    severity: warning

  void():
    name: "void()"
    regex: "Void\\(\\)"
    message: "Prefer `()` over `Void()`"
    severity: warning

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
expiring_todo:
  approaching_expiry_threshold: 0
  date_format: "dd/MM/yyyy"

file_length:
  warning: 400
  error: 600

function_body_length:
  warning: 50
  error: 70

line_length:
  warning: 150
  ignores_comments: true
  ignores_urls: true

closure_body_length:
  warning: 30
  error: 50

type_name:
  max_length: 50

type_body_length:
  warning: 400
  error: 400

vertical_whitespace:
  max_empty_lines: 2

nesting:
    type_level: 2 # Setting this to two because sometimes we need to do 2-level nesting for Constants

function_parameter_count:
  warning: 7

reporter: "xcode"
